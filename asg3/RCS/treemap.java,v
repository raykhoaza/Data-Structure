head	1.13;
access;
symbols;
locks;
comment	@# @;


1.13
date	2014.05.13.08.36.04;	author -;	state -;
branches;
next	1.12;

1.12
date	2014.05.12.10.35.27;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.05.12.10.33.54;	author -;	state -;
branches;
next	1.10;

1.10
date	2014.05.12.10.25.19;	author -;	state -;
branches;
next	1.9;

1.9
date	2014.05.12.10.03.11;	author -;	state -;
branches;
next	1.8;

1.8
date	2014.05.12.09.10.12;	author -;	state -;
branches;
next	1.7;

1.7
date	2014.05.12.09.06.45;	author -;	state -;
branches;
next	1.6;

1.6
date	2014.05.12.09.03.43;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.05.12.09.01.23;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.05.12.09.00.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.05.12.06.08.22;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.12.06.06.51;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.12.05.24.10;	author -;	state -;
branches;
next	;


desc
@@


1.13
log
@-
@
text
@// $Id: treemap.java,v 1.12 2014-05-12 03:35:27-07 - - $
// NAME: KHOA LUONG USERNAME: KLUON7
import static java.lang.System.*;

class treemap <key_t extends Comparable <key_t>, value_t> {

   private class node {
      key_t key;
      value_t value;
      node left;
      node right;
   }
   private node root;

   private void debug_dump_rec (node tree, int depth) {
      if(tree==null){return;}
      debug_dump_rec(tree.left,depth+1);
      String space = " ";
      for(int i=0;i<depth;i++){
         System.out.print(space);
      }
      System.out.format("%s%d %s %s\n",space, depth, tree.key, 
                        tree.value);
      debug_dump_rec(tree.right, depth+1); 
   }

   private void do_visit_rec (visitor <key_t, 
                value_t> visit_fn,node tree) {
      if(tree == null) return;
      else {
         do_visit_rec(visit_fn, tree.left);
         visit_fn.visit(tree.key, tree.value);
         do_visit_rec(visit_fn, tree.right);
      }
   }

   public value_t get (key_t key) {
      node current = root;
      int compare = 0;
      while(current != null){
         compare = current.key.compareTo(key);
         if(compare == 0){
            return current.value;
         }
         if(compare < 0){current = current.right;}
         else{current = current.left;} 
      }
      return null;
   }

   public value_t put (key_t key, value_t value) {
      if(root==null){
         root = new node();
         root.key = key;
         root.value = value;
         return null;
      }
      node current = root;
      node oldroot = null;
      int compare = key.compareTo(current.key);
      while(current!=null){
         if(compare == 0){
            value_t oldvalue = current.value;
            current.value = value;
            return oldvalue;  
         }
         oldroot = current;
         if(compare>0){
            current = current.right;
         }
         else{
            current = current.left;
         }
      }
      current = new node();
      current.key = key;
      current.value = value;
      if(compare>0){
         oldroot.right = current; 
      }
      else{
         oldroot.left = current;
      }
      return null;       
   }

   public void debug_dump () {
      debug_dump_rec (root, 0);
   }

   public void do_visit (visitor <key_t, value_t> visit_fn) {
      do_visit_rec (visit_fn, root);
   }

}
@


1.12
log
@-
@
text
@d1 2
a2 2
// $Id: treemap.java,v 1.11 2014-05-12 03:33:54-07 - - $

d68 2
a69 2
         if(compare<0){
            current = current.left;
d72 1
a72 1
            current = current.right;
d76 1
d78 2
a79 3
      current.key = key;
      if(compare<0){
         oldroot.left = current; 
d82 1
a82 1
         oldroot.right = current;
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.10 2014-05-12 03:25:19-07 - - $
d22 1
a22 1
      System.out.format("%s%s %s %s\n",space, depth, tree.key, 
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.9 2014-05-12 03:03:11-07 - - $
d17 1
a17 1
      debug_dump_rec(tree.left, depth+1);
d22 1
a22 1
      System.out.format("%s%d %s %d\n",space, depth, tree.key, 
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.8 2014-05-12 02:10:12-07 - - $
d39 1
a39 1
      int compare = current.key.compareTo(key);
d41 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.6 2014-05-12 02:03:43-07 - - $
d27 2
a28 1
   private void do_visit_rec (visitor <key_t, value_t> visit_fn,node tree) {
@


1.7
log
@-
@
text
@d61 1
a61 1
            value_t = current.value;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.5 2014-05-12 02:01:23-07 - - $
d31 1
a31 1
         visit_fn.visit(tree.key. tree.value);
d61 1
a61 1
            value_t = oldvalue = current.value;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.4 2014-05-12 02:00:54-07 - - $
a55 1
      int compare = key.compareTo(current.key);
d58 1
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.3 2014-05-11 23:08:22-07 - - $
d41 1
a41 1
            return current.value
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.2 2014-05-11 23:06:51-07 - - $
d16 5
a20 4
      if(tree!=null){
         debug_dump_rec (tree.left,depth);
         out.printf("%n %s",depth,tree.value);
         debug_dump_rec(tree.right, depth);
d22 3
d27 7
a33 3
   private void do_visit_rec (visitor <key_t, value_t> visit_fn,
                              node tree) {
      throw new UnsupportedOperationException ();
d37 10
a46 1
      throw new UnsupportedOperationException ();
d50 17
a66 5
      node current = new node();
      current = root;
      boolean leaf = false;
      while(current.key != key && leaf!=true){
         if(key.compareTo(current.key)<0){
a67 3
            if(current.left==null && current.right==null){
               leaf = true;
            }
d69 1
a69 1
         if(key.compareTo(current.key)>0){
a70 23
            if(current.left == null && current.right == null){
               leaf = true;
            }
         }
         if(current.key.compareTo(key) == 0){
            value_t temp = current.value;
            current.value = value;
            return temp;
         }
         else if(leaf==true){
            node newLeaf = new node();
            if(key.compareTo(current.key)<0){
               current.left=newLeaf;
               newLeaf.key=key;
               newLeaf.value=value;
               return null;
            }
            if(key.compareTo(current.key)>0){
               current.right = newLeaf;
               newLeaf.key=key;
               newLeaf.value=value;
               return null;
            }
d73 10
a82 2
      return null;
        
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-05-11 22:24:10-07 - - $
d18 1
a18 1
         out.printf("%n %s",depth,node.value);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: treemap.java,v 1.1 2014-01-16 17:44:47-08 - - $
d18 1
a18 2
         out.printf("This is Depth %n This is key %s ",
                    depth, tree.key, "This is value %s ", tree.value);
@
