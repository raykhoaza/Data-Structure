head	1.8;
access;
symbols;
locks;
comment	@ * @;


1.8
date	2013.04.25.04.03.46;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.04.24.01.29.11;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.03.09.02.09.34;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.01.30.03.59.45;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.29.22.37.23;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.29.22.31.35;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.29.22.31.10;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.29.22.30.53;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: getoptex.c,v 1.7 2013-04-23 18:29:11-07 - - $

//
// NAME
//    getoptex - getopt(3) example
//
// SYNOPSIS
//    getoptex [-ilm] operands
//
// DESCRIPTION
//    An example to show now getopt(3) is used.  After scanning
//    options, all options and operands are printed.
//

#include <libgen.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

char *program_name = NULL;
int exit_status = EXIT_SUCCESS;

typedef struct options {
   bool ignore_case;
   bool filenames_only;
   bool number_lines;
} options;

void scan_options (int argc, char **argv, options *opts) {
   opts->ignore_case = false;
   opts->filenames_only = false;
   opts->number_lines = false;
   opterr = false;
   for (;;) {
      int opt = getopt (argc, argv, "ilm");
      if (opt == EOF) break;
      switch (opt) {
         case 'i':
            opts->ignore_case = true;
            break;
         case 'l':
            opts->filenames_only = true;
            break;
         case 'm':
            opts->number_lines = true;
            break;
         default:
            exit_status = EXIT_FAILURE;
            fflush (NULL);
            fprintf (stderr, "%s: -%c: invalid option\n",
                             program_name, optopt);
            break;
      }
   }
}


const char *strbool (bool value) {
   return value ? "true" : "false";
}

int main (int argc, char **argv) {
   options opts;
   program_name = basename (argv[0]);
   scan_options (argc, argv, &opts);
   printf ("ignore_case = %s\n", strbool (opts.ignore_case));
   printf ("filenames_only = %s\n", strbool (opts.filenames_only));
   printf ("number_lines = %s\n", strbool (opts.number_lines));
   for (int argi = optind; argi < argc; ++argi) {
      printf ("operand[%d] = \"%s\"\n", argi, argv[argi]);
   }
   return exit_status;
}

//TEST// ./getoptex -im foo bar baz >getoptex.out
//TEST// mkpspdf getoptex.ps getoptex.c* getoptex.out*

@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: getoptex.c,v 1.6 2013-03-08 18:09:34-08 - - $
d24 1
a24 1
struct options {
d28 1
a28 1
};
d30 1
a30 1
void scan_options (int argc, char **argv, struct options *opts) {
d64 1
a64 1
   struct options opts;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: getoptex.c,v 1.5 2013-01-29 19:59:45-08 - - $
d76 3
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: getoptex.c,v 1.4 2013-01-29 14:37:23-08 - - $
d59 1
a59 1
const char *booltostr (bool value) {
d67 3
a69 3
   printf ("ignore_case = %s\n", booltostr (opts.ignore_case));
   printf ("filenames_only = %s\n", booltostr (opts.filenames_only));
   printf ("number_lines = %s\n", booltostr (opts.number_lines));
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: getoptex.c,v 1.3 2013-01-29 14:31:35-08 - - $
d39 9
a47 3
         case 'i': opts->ignore_case = true; break;
         case 'l': opts->filenames_only = true; break;
         case 'm': opts->number_lines = true; break;
d53 1
d58 5
d67 3
a69 3
   printf ("ignore_case = %d\n", opts.ignore_case);
   printf ("filenames_only = %d\n", opts.filenames_only);
   printf ("number_lines = %d\n", opts.number_lines);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: getoptex.c,v 1.2 2013-01-29 14:31:10-08 - - $
d41 1
a41 1
         case 'n': opts->number_lines = true; break;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: getoptex.c,v 1.1 2013-01-29 14:30:53-08 - - $
d59 1
a59 1
      printf ("operand[%d] = \"%s\"\n", argv[argi]);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d59 1
a59 1
      printf ("operand[%d] = \"%s\"\n", operand[argi]);
@
