head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2013.02.09.02.00.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.02.09.02.00.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.02.02.02.51.19;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: list1.c,v 1.2 2013-02-08 18:00:27-08 - - $

#include <assert.h>
#include <stdio.h>

typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
   }
   return 9;
}
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list1.c,v 1.1 2011-02-01 18:51:19-08 - - $
d15 1
a15 1
      node *node = malloc (sizeof (node_ref));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list1.c,v 1.1 2010-10-14 18:34:59-07 - - $
d6 1
a6 1
typedef struct node *node_ref;
d9 1
a9 1
   node_ref link;
d13 1
a13 1
   node_ref head;
d15 1
a15 1
      node_ref node = malloc (sizeof (node_ref));
d21 1
a21 1
   for (node_ref curr = head; curr->link != NULL; curr = curr->link) {
@
