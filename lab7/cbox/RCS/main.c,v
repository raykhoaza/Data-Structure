head	1.12;
access;
symbols;
locks;
comment	@ * @;


1.12
date	2014.02.28.01.46.38;	author -;	state -;
branches;
next	1.11;

1.11
date	2014.02.14.02.38.23;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.03.13.20.36.20;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.03.13.20.35.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.02.16.01.16.47;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.02.16.01.16.14;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.02.12.03.07.55;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.11.02.02.33.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.02.15.04.49.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.02.15.04.44.24;	author -;	state -;
branches;
next	1.2;

1.2
date	2012.02.15.03.53.18;	author -;	state -;
branches;
next	1.1;

1.1
date	2012.02.15.03.50.35;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: main.c,v 1.11 2014-02-13 18:38:23-08 - - $

//
// Silly main program which just creates an cbox box, puts a
// number in it, gets it back out, and deletes the box.
// Run with bcheck to verify no memory leaks.
//

#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "cbox.h"

char *execname = NULL;

int main (int argc, char **argv) {
   (void) argc; // warning: unused parameter 'argc'
   execname = basename (argv[0]);

   // Declare the box and initialize it.
   cbox *box = new_cbox();
   printf ("box = %p\n", box);

   // Perform a couple of operations on it.
   put_cbox (box, 1024);
   printf ("box value is %d\n", get_cbox (box));

   // Free up the box.
   free_cbox (box);

   return EXIT_SUCCESS;
}

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.10 2013-03-13 13:36:20-07 - - $
a13 2
#include <sys/time.h>
#include <time.h>
d31 1
a31 1
   // Free up the box and set the handle to NULL to avoid a dangle.
a32 1
   box = NULL;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.9 2013-03-13 13:35:57-07 - - $
d4 1
a4 1
// Silly main program which just creates an intx box, puts a
d17 1
a17 1
#include "intx.h"
d26 1
a26 1
   intx *box = new_intx();
d30 2
a31 2
   put_intx (box, 1024);
   printf ("box value is %d\n", get_intx (box));
d34 1
a34 1
   free_intx (box);
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.8 2013-02-15 17:16:47-08 - - $
d22 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: main.c,v 1.7 2013-02-15 17:16:14-08 - - $
a21 1
   argc = argc; // Avoid:16: warning: unused parameter 'argc'
@


1.7
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.6 2013-02-11 19:07:55-08 - - $ */
d25 1
a25 1
   /* Declare the box and initialize it.  */
d29 1
a29 1
   /* Perform a couple of operations on it.  */
d33 1
a33 1
   /* Free up the box and set the handle to NULL to avoid a dangle. */
@


1.6
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.5 2012-11-01 19:33:32-07 - - $ */
d3 5
a7 5
/*
* Silly main program which just creates an intx box, puts a
* number in it, gets it back out, and deletes the box.
* Run with bcheck to verify no memory leaks.
*/
@


1.5
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.4 2012-02-14 20:49:59-08 - - $ */
d26 1
a26 1
   intx_ref box = new_intx();
@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.3 2012-02-14 20:44:24-08 - - $ */
a20 16
void say_when (char *when) {
   struct timeval timeval;
   int retcode = gettimeofday (&timeval, NULL);
   if (retcode != 0) {
      fprintf (stderr, "%s: gettimeofday: %s\n",
               execname, strerror (errno));
   }
   struct tm *tm_buffer = localtime (&timeval.tv_sec);
   char buffer1[64];
   char buffer2[64];
   strftime (buffer1, sizeof buffer1, "%a %b %e %T", tm_buffer);
   strftime (buffer2, sizeof buffer2, " %Z %Y", tm_buffer);
   printf ("%s: %s: %s.%06ld %s\n", execname, when,
           buffer1, timeval.tv_usec, buffer2);
}

a23 1
   say_when ("starting");
a36 2
   /* OK! */
   say_when ("finished");
@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.2 2012-02-14 19:53:18-08 - - $ */
d9 1
d13 1
d23 6
a28 3
   gettimeofday (&timeval, NULL);
   struct tm tm_buffer;
   localtime_r (&timeval.tv_sec, &tm_buffer);
d31 2
a32 2
   strftime (buffer1, sizeof buffer1, "%a %b %e %T", &tm_buffer);
   strftime (buffer2, sizeof buffer2, " %Z %Y", &tm_buffer);
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.1 2012-02-14 19:50:35-08 - - $ */
a14 1
#include "bool.h"
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: main.c,v 1.1 2011-04-29 19:53:56-07 - - $ */
d15 1
a15 1
#include "auxlib.h"
@
